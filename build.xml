<?xml version="1.0"?>
<project name="mispi3">

    <property name="src" location="src"/>
    <property name="class" location="target/classes"/>
    <property name="jar" location="target/artifacts"/>
    <property name="reports" location="target/reports"/>
    <property name="main-class" location="src/main/java/com/lab2/servlets/ControllerServlet.java"/>

    <property name="git.repo.url" value="https://github.com/d0ggzi/mispi-lab3.git"/>
    <property name="git.branch" value="main"/>
    <property name="git.dir" value="git-checkout"/>
    <property name="output.dir" value="dist"/>
    <property name="params.file" value="src/params.txt"/>
    <property name="commit.message" value="Changes committed by Ant"/>
    <loadfile property="params" srcFile="${params.file}"/>

    <path id="classpath">
        <fileset dir="lib" includes="**/*.jar"/>
    </path>

    <target name="clean" description="Deleting compiled project classes and all temporary files">
        <echo>Cleaning...</echo>
        <delete dir="${class}"/>
        <echo>Cleaning completed successfully!</echo>
    </target>

    <target name="compile" description="Compiling project sources" depends="clean">
        <echo>Compiling project sources...</echo>
        <mkdir dir="${class}"/>
        <javac includeantruntime="true"
               srcdir="${src}"
               destdir="${class}">

            <classpath>
                <path refid="classpath"/>

            </classpath>
        </javac>
        <echo>Compilation completed successfully!</echo>
    </target>

    <target name="build" depends="compile" description="Packaging compiled files into an executable jar archive">
        <echo>Building..</echo>
        <mkdir dir="${jar}"/>
        <jar basedir="${class}" destfile="${jar}/${ant.project.name}.jar">
            <manifest>
                <attribute name="Main-Class" value="${main-class}"/>
                <attribute name="Version" value="1.0"/>
            </manifest>
        </jar>
        <echo>Packaging completed successfully!</echo>
    </target>

    <target name="test" depends="build" description="Running project jUnit-tests">
        <echo>Program testing...</echo>
        <junit printsummary="true" haltonfailure="true">
            <classpath>
                <path refid="classpath"/>
                <pathelement location="${class}"/>
                <pathelement location="${main-class}"/>
                <pathelement location="${class}"/>
            </classpath>
            <test name="ResultCheckerTest" todir="target/reports"/>
            <formatter type="plain" usefile="false"/>
        </junit>
        <echo>Program testing completed successfully!</echo>
    </target>

    <target name="music" depends="build">
        <sound>
            <success source="sound.wav"/>
        </sound>
    </target>

    <target name="scp" depends="build">
        <scp file="${war}" todir="${host}:/${path}" password="${password}" port="${port}"/>
    </target>

    <target name="xml" description="Validation of all xml files in the project">
        <echo>XML project files validation...</echo>
        <xmlvalidate lenient="true">
            <fileset dir="./" includes="**/*.xml">
                <exclude name=".idea/**"/>
            </fileset>
        </xmlvalidate>
        <echo>XML files validation completed successfully!</echo>
    </target>

    <target name="team">
        <mkdir dir="${output.dir}"/>

        <for param="revision" from="-1" to="-3" step="-1">
            <sequential>
                <git dir="${git.dir}" branch="${git.branch}" rev="@{revision}" cloneSubmodules="true"/>
                <ant antfile="${git.dir}/build.xml"/>
                <zip destfile="${output.dir}/revision@{revision}.zip" basedir="${git.dir}/build"/>
            </sequential>
        </for>
    </target>

    <target name="report" depends="test" description="If test has been passed successfully, then make xml-jUnit-report and commit it">
        <echo>Report creating...</echo>
        <junit printsummary="true" haltonfailure="true">
            <classpath>
                <path refid="classpath"/>
                <pathelement location="${class}"/>
                <pathelement location="${main-class}"/>
                <pathelement location="${class}"/>
            </classpath>
            <test name="ResultCheckerTest" todir="target/reports"/>
            <formatter type="xml" usefile="true"/>
        </junit>
        <exec executable="git">
            <arg value="add"/>
            <arg value="${reports}/*"/>
        </exec>
        <input message="Please enter commit message:"
               addproperty="msg"/>
        <exec executable="git">
            <arg value="commit"/>
            <arg value="-m"/>
            <arg value="${msg}"/>
        </exec>
        <echo>Report creating completed successfully!</echo>
    </target>


    <target name="CheckChanges">
        <exec executable="git" outputproperty="diff.output">
            <arg value="diff"/>
        </exec>

        <condition property="some.property">
            <equals arg1="1" arg2="1" />
        </condition>

        <condition property="changes_in_diff">
<!--            <resourcecontains resource="${diff.output}" substring="${params}"/>-->
            <contains string="${diff.output}" substring="${params}"/>
        </condition>

        <echoproperties></echoproperties>
    </target>

    <target name="diff" if="changes_in_diff" depends="CheckChanges">
        <antcall target="commit" />
    </target>

    <target name="commit">
        <exec executable="git">
            <arg value="add"/>
            <arg value="."/>
        </exec>
        <exec executable="git">
            <arg value="commit"/>
            <arg value="-m"/>
            <arg value="${commit.message}"/>
        </exec>
    </target>

</project>